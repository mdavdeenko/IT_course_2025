import random
import yfinance as yf
from aiogram import F, Bot, Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.types import KeyboardButton

from bot.keyboards import main_kb
from bot.states import StockStates
from bot.stocks_data import TICKERS

import logging
logging.basicConfig(level=logging.DEBUG)

router = Router()

def tickers_kb():
    builder = ReplyKeyboardBuilder()
    for ticker in TICKERS.keys():
        builder.add(KeyboardButton(text=ticker))
    builder.add(KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞"))
    builder.adjust(4)
    return builder.as_markup(resize_keyboard=True)

@router.message(lambda message: message.text == 'üìã –°–ø–∏—Å–æ–∫ –∞–∫—Ü–∏–π')
async def show_tickers(message: types.Message):
    tickers_list = "\n".join(
        [f"<b>{ticker}</b> - {data['name']} ({data['description']})" 
         for ticker, data in TICKERS.items()]
    )
    await message.answer(
        "üìä <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã:</b>\n\n" + tickers_list,
        reply_markup=main_kb()
    )

@router.message(F.text == "üìú –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—Ç")
async def random_fact(message: types.Message):
    ticker = random.choice(list(TICKERS.keys()))
    fact = random.choice(TICKERS[ticker]["facts"])
    
    await message.answer(
        f"üìú <b>–ò—Å—Ç–æ—Ä–∏—è {ticker}:</b>\n\n{fact}",
        parse_mode="HTML"
    )

@router.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "üìà <b>–ë–∏—Ä–∂–µ–≤–æ–π –±–æ—Ç</b>\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_kb()
    )

ADMIN_ID = 1371735198
ADMIN_USERNAME = 'maryana_avdeenko1'

@router.message(F.text == "üÜò –ü–æ–º–æ—â—å")
async def help_command(message: types.Message, bot: Bot):
    builder = InlineKeyboardBuilder()
    builder.button(
        text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É", 
        url=f"https://t.me/{ADMIN_USERNAME}"
    )
    
    await message.answer(
        "‚úâÔ∏è <b>–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</b>\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    
    user = message.from_user
    user_profile = f"@{user.username}" if user.username else f"[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å](tg://user?id={user.id})"
    
    try:
        await bot.send_message(
            chat_id=ADMIN_ID,
            text=f"üÜò –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å:\n"
                 f"ID: {user.id}\n"
                 f"–ò–º—è: {user.full_name}\n"
                 f"–ü—Ä–æ—Ñ–∏–ª—å: {user_profile}\n"
                 f"–ù–∞–ø–∏—à–∏—Ç–µ –µ–º—É: [—Å—Å—ã–ª–∫–∞](tg://user?id={user.id})",
            parse_mode="Markdown",
            disable_web_page_preview=True
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
    
@router.message(lambda message: message.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cmd_cancel(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=main_kb())

@router.message(lambda message: message.text == "üíµ –¶–µ–Ω–∞ –∞–∫—Ü–∏–∏")
async def ask_stock_symbol(message: types.Message, state: FSMContext):
    await state.set_state(StockStates.waiting_for_ticker_selection)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ü–µ–Ω—ã:",
        reply_markup=tickers_kb()
    )

async def get_real_stock_price(ticker: str) -> float:
    try:
        stock = yf.Ticker(ticker)
        data = stock.history(period="1d")
        
        if data.empty:
            logging.warning(f"No data for {ticker}")
            return None
        
        return data['Close'].iloc[-1]
    
    except Exception as e:
        logging.error(f"Error getting price for {ticker}: {e}")
        return None

async def get_stock_data(ticker: str):
    try:
        stock = yf.Ticker(ticker)
        data = stock.history(period="1d")
        
        if data.empty:
            logging.warning(f"No data for {ticker}")
            return None
            
        current_price = data['Close'].iloc[-1]
        previous_close = data['Close'].iloc[0] if len(data) > 1 else current_price
        
        return {
            'current_price': current_price,
            'previous_close': previous_close
        }
    
    except Exception as e:
        logging.error(f"Error getting data for {ticker}: {e}")
        return None

@router.message(StockStates.waiting_for_ticker_selection)
async def show_selected_stock_price(message: types.Message, state: FSMContext):
    ticker = message.text.upper()
    
    if ticker not in TICKERS:
        await message.answer("‚ùå –¢–∏–∫–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:")
        return
        
    stock_data = await get_stock_data(ticker)
    
    if stock_data is None:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∞–∫—Ü–∏–∏", reply_markup=main_kb())
        await state.clear()
        return
        
    current_price = stock_data['current_price']
    previous_close = stock_data['previous_close']
    change = current_price - previous_close
    change_percent = (change / previous_close) * 100
        
    await message.answer(
        f"<b>üìä {ticker}</b>\n"
        f"–¶–µ–Ω–∞: <b>{current_price:.2f} USD</b>\n"
        f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ: <b>{change:.2f} ({change_percent:.2f}%)</b>",
        reply_markup=main_kb()
    )
    await state.clear()

@router.message(F.text == "‚öñÔ∏è –°—Ä–∞–≤–Ω–∏—Ç—å")
async def start_compare(message: types.Message, state: FSMContext):
    await state.set_state(StockStates.waiting_for_first_ticker)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—É—é –∞–∫—Ü–∏—é –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:",
        reply_markup=tickers_kb()
    )

@router.message(StockStates.waiting_for_first_ticker)
async def process_first_ticker(message: types.Message, state: FSMContext):
    ticker = message.text.upper()
    
    if ticker not in TICKERS:
        await message.answer("‚ùå –¢–∏–∫–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:")
        return
        
    await state.update_data(first_ticker=ticker)
    await state.set_state(StockStates.waiting_for_second_ticker)
    await message.answer(
        f"–í—ã–±—Ä–∞–Ω–∞ –ø–µ—Ä–≤–∞—è –∞–∫—Ü–∏—è: {ticker}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ç–æ—Ä—É—é –∞–∫—Ü–∏—é:",
        reply_markup=tickers_kb()
    )

@router.message(StockStates.waiting_for_second_ticker)
async def process_second_ticker(message: types.Message, state: FSMContext):
    ticker = message.text.upper()
    
    if ticker not in TICKERS:
        await message.answer("‚ùå –¢–∏–∫–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:")
        return
        
    data = await state.get_data()
    first_ticker = data.get('first_ticker')
    
    if first_ticker == ticker:
        await message.answer("‚ùå –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç—É –∂–µ –∞–∫—Ü–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é:")
        return
    
    price_a = await get_real_stock_price(first_ticker)
    price_b = await get_real_stock_price(ticker)
    
    if price_a is None or price_b is None:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è", reply_markup=main_kb())
        await state.clear()
        return
        
    difference = abs(price_a - price_b)
    change_percent = (difference / min(price_a, price_b)) * 100
    
    await message.answer(
        f"‚öîÔ∏è <b>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞–∫—Ü–∏–π:</b>\n\n"
        f"{first_ticker}: <b>{price_a:.2f}$</b>\n"
        f"{ticker}: <b>{price_b:.2f}$</b>\n\n"
        f"üìä –†–∞–∑–Ω–∏—Ü–∞: <b>{difference:.2f}$ ({change_percent:.2f}%)</b>",
        parse_mode="HTML",
        reply_markup=main_kb()
    )
    
    await state.clear()